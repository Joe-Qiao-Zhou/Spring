<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--配置spring的ioc-->
    <bean id="accountService" class="service.impl.AccountServiceImpl"></bean>

    <!--spring中基于xml的aop配置
        1.把通知bean交给spring管理
        2.使用aop:config开始aop的配置
        3.使用aop:aspect开始配置切面
        4.在aspect内部使用对应标签配置通知类型
        5.before标签的pointcut属性用于指定切入点表达式
            写法：关键字：execution 表达式：访问修饰符 返回值 包名.类名.方法名（参数列表）
                访问修饰符可以省略
                返回值可以使用通配符
                包名可以使用通配符，有几级写几个*；*..表示当前包和子包
                类名和方法名都可以使用*
                参数类型可使用*，但必须有参数；有无参数可使用..
                全通配：* *..*.*(..)

                实际开发中通常写法：切到业务层实现类下的所有方法
    -->

    <!--配置logger类-->
    <bean id="logger" class="utils.logger"></bean>

    <!--配置aop-->
    <aop:config>
        <aop:pointcut id="pt1" expression="execution(* service.impl.*.*(..))"/>

        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知类型且建立通知方法与切入点方法的关联-->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>-->
<!--            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
<!--            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>-->
<!--            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>-->
<!--            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->

            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>